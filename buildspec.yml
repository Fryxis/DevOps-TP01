version: 0.2

phases:
  install:
    runtime-versions:
      php: 8.2
    commands:
      - echo "Lancement de la phase d'installation"
      - yum update -y
      - yum remove -y php8.3*
      - yum install -y php-pgsql
      - yum install -y php-bcmath
      - yum install -y php-ctype
      - yum install -y php-fileinfo
      - yum install -y php-mbstring
      - yum install -y php8.2-mysqlnd --allowerasing
      - yum install -y php-tokenizer
      - yum install -y php-xml
      - yum install -y php-json
      - yum install -y php-pear
      - yum install -y php-devel
      - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  pre_build:
    commands:
      - echo "Lancement de la phase de pre-build"	
      - echo "Récupération des variables dans secrets manager"
      - export CACHE_DRIVER=file
      - export FILESYSTEM_DRIVER=local
      - export DB_HOST=$(aws secretsmanager get-secret-value --secret-id Secret_Mysql_lenny --query SecretString --output text | jq -r .DB_HOST)
      - export DB_PORT=$(aws secretsmanager get-secret-value --secret-id Secret_Mysql_lenny --query SecretString --output text | jq -r .DB_PORT)
      - export DB_DATABASE=$(aws secretsmanager get-secret-value --secret-id Secret_Mysql_lenny --query SecretString --output text | jq -r .DB_DATABASE)
      - export DB_USERNAME=$(aws secretsmanager get-secret-value --secret-id Secret_Mysql_lenny --query SecretString --output text | jq -r .DB_USERNAME)
      - export DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id Secret_Mysql_lenny --query SecretString --output text | jq -r .DB_PASSWORD)
      - composer install --no-interaction --prefer-dist --optimize-autoloader
      - npm install
      - mv .env.prod .env
      - echo "Replacement des variables d'environnement"
      - sed -i "s/\${DB_HOST}/$DB_HOST/g" .env
      - sed -i "s/\${DB_PORT}/$DB_PORT/g" .env
      - sed -i "s/\${DB_DATABASE}/$DB_DATABASE/g" .env
      - sed -i "s/\${DB_USERNAME}/$DB_USERNAME/g" .env
      - sed -i "s/\${DB_PASSWORD}/$DB_PASSWORD/g" .env
      # Partie Nginx pas noté mais une solution.
      - echo "Configuration Nginx"
      #- mkdir /etc/nginx/sites-available/
      #- mkdir /etc/nginx/sites-enabled/
      #- mkdir /etc/nginx/snippets/
      - rm -rf /etc/nginx/nginx.conf
      - cp /www/html/nginx/nginx.conf /etc/nginx/nginx.conf
      #- cp /www/html/nginx/crm /etc/nginx/sites-available/crm
      #- cp /www/html/nginx/fastcgi-php.conf /etc/nginx/snippets/fastcgi-php.conf
      - rm -rf /www/html/nginx/
      #- ln -s /etc/nginx/sites-available/crm /etc/nginx/sites-enabled/
      - echo "Redémarrage Nginx"
      - systemctl restart nginx
  build:
    on-failure: ABORT
    commands:
      - echo "Lancement de la phase de build"
      - npm run production
      - php artisan key:generate
      - php artisan cache:clear
      - php artisan view:clear
      - php artisan optimize:clear
      - php artisan migrate --force
  post_build:
    commands:
      - echo "Lance de la phase de post-build"
      - php artisan test
      - chmod +x .platform/hooks/postdeploy/postdeploy.sh
artifacts:
  files:
    - '**/*'
    - '.platform/**/*'
  name: $(date +%Y-%m-%d_%H-%M-%S).zip
proxy:
  upload-artifacts: no
  logs: no
